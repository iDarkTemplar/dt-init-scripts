#!/bin/sh
#
# Copyright (C) 2017 i.Dark_Templar <darktemplar@dark-templar-archives.net>
#
# This file is part of DT init scripts.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

mount_all() {
	mount -t proc none /proc -o noexec,nosuid,nodev
	mount -t sysfs none /sys -o noexec,nosuid,nodev
	mount -t devtmpfs none /dev
	mkdir -m 0755 /dev/pts
	mount devpts /dev/pts -t devpts -o mode=0620
	mount -t tmpfs none /run -o rw,nosuid,nodev,relatime,mode=0755
}

umount_all() {
	umount -l /proc
	umount -l /sys
	umount -l /dev
	umount -l /run
}

move_mounts_to_chroot() {
	for fs in /run /dev /sys /proc ; do
		local chroot_dir="/mnt${fs}"
		[ ! -e "${chroot_dir}" ] &&  mkdir -p "${chroot_dir}"
		mount --move $fs "${chroot_dir}"
	done
}

hook_get() {
	while read -r line ; do
		if [ ! -z "$line" ] ; then
			case $line in
				initrd_hooks=\"*\")
					hooks="$(echo $line | sed -e 's|^initrd_hooks="||' -e 's|\"$||')"
					;;
			esac
		fi
	done < "${configdir}/dt-init-scripts.conf"

	for cmd in $(/bin/cat /proc/cmdline); do
		case $cmd in
			initrd_hooks=\"*\")
				hooks="$(echo $line | sed -e 's|^initrd_hooks="||' -e 's|\"$||')"
				;;
		esac
	done
}

hook_load() {
	for hook in $(echo $hooks | sed -e 's|,| |g') ; do
		basehook="$(echo $hook | cut -d: -f 1)"
		hookopts="$(echo $hook | cut -d: -f 2- -s)"

		if [ -e "/etc/hooks/${basehook}" ] ; then
			. "/etc/hooks/${basehook}"
		fi
	done
}

hook_parse_args() {
	for hook in $(echo $hooks | sed -e 's|,| |g') ; do
		basehook="$(echo $hook | cut -d: -f 1)"
		hookopts="$(echo $hook | cut -d: -f 2- -s)"

		if type -t hook_parse_args_${basehook} >/dev/null ; then
			hook_parse_args_${basehook} "${hookopts}"
		fi
	done
}

hook_run() {
	for hook in $(echo $hooks | sed -e 's|,| |g') ; do
		basehook="$(echo $hook | cut -d: -f 1)"
		hookopts="$(echo $hook | cut -d: -f 2- -s)"

		if type -t hook_run_${basehook} >/dev/null ; then
			hook_run_${basehook} "${hookopts}"
			if [ $? -ne 0 ] ; then
				# hook failed, deinit and exec to shell
				if [ $$ -eq 1 ] ; then
					set_verbosity 1
					hook_finish
					exec /bin/sh
				else
					return 1
				fi
			fi
		fi
	done
}

hook_finish() {
	for hook in $(echo $hooks | sed -e 's|,| |g') ; do
		basehook="$(echo $hook | cut -d: -f 1)"
		hookopts="$(echo $hook | cut -d: -f 2- -s)"

		if type -t hook_finish_${basehook} >/dev/null ; then
			hook_finish_${basehook} "${hookopts}"
		fi
	done
}

hook_post() {
	for hook in $(echo $hooks | sed -e 's|,| |g') ; do
		basehook="$(echo $hook | cut -d: -f 1)"
		hookopts="$(echo $hook | cut -d: -f 2- -s)"

		if type -t hook_post_${basehook} >/dev/null ; then
			hook_post_${basehook} "${hookopts}"
		fi
	done
}

hook_deinit() {
	for hook in $(echo $hooks | sed -e 's|,| |g') ; do
		basehook="$(echo $hook | cut -d: -f 1)"
		hookopts="$(echo $hook | cut -d: -f 2- -s)"

		if type -t hook_deinit_${basehook} >/dev/null ; then
			hook_deinit_${basehook} "${hookopts}"
		fi
	done
}

hook_get_shutdown() {
	while read -r line ; do
		if [ ! -z "$line" ] ; then
			case $line in
				shutdown_hooks=\"*\")
					hooks="$(echo $line | sed -e 's|^shutdown_hooks="||' -e 's|\"$||')"
					;;
			esac
		fi
	done < "${configdir}/dt-init-scripts.conf"
}

hook_load_shutdown() {
	for hook in $(echo $hooks | sed -e 's|,| |g') ; do
		basehook="$(echo $hook | cut -d: -f 1)"
		hookopts="$(echo $hook | cut -d: -f 2- -s)"

		if [ -e "${sharedir}/hooks/${basehook}" ] ; then
			. "${sharedir}/hooks/${basehook}"
		fi
	done
}

hook_init_shutdown() {
	for hook in $(echo $hooks | sed -e 's|,| |g') ; do
		basehook="$(echo $hook | cut -d: -f 1)"
		hookopts="$(echo $hook | cut -d: -f 2- -s)"

		if type -t hook_init_shutdown_${basehook} >/dev/null ; then
			hook_init_shutdown_${basehook} "${hookopts}"
		fi
	done
}

hook_reinit_shutdown() {
	for hook in $(echo $hooks | sed -e 's|,| |g') ; do
		basehook="$(echo $hook | cut -d: -f 1)"
		hookopts="$(echo $hook | cut -d: -f 2- -s)"

		if type -t hook_reinit_shutdown_${basehook} >/dev/null ; then
			hook_reinit_shutdown_${basehook} "${hookopts}"
		fi
	done
}

hook_prepare_shutdown() {
	for hook in $(echo $hooks | sed -e 's|,| |g') ; do
		basehook="$(echo $hook | cut -d: -f 1)"
		hookopts="$(echo $hook | cut -d: -f 2- -s)"

		if type -t hook_prepare_shutdown_${basehook} >/dev/null ; then
			hook_prepare_shutdown_${basehook} "${hookopts}"
		fi
	done
}

hook_shutdown() {
	for hook in $(echo $hooks | sed -e 's|,| |g') ; do
		basehook="$(echo $hook | cut -d: -f 1)"
		hookopts="$(echo $hook | cut -d: -f 2- -s)"

		if type -t hook_shutdown_${basehook} >/dev/null ; then
			hook_shutdown_${basehook} "${hookopts}"
		fi
	done
}

set_verbosity() {
	local verbose=$1

	for hook in $(echo $hooks | sed -e 's|,| |g') ; do
		basehook="$(echo $hook | cut -d: -f 1)"
		hookopts="$(echo $hook | cut -d: -f 2- -s)"

		if type -t hook_set_verbosity_${basehook} >/dev/null ; then
			hook_set_verbosity_${basehook} "$verbose" "${hookopts}"
		fi
	done
}

splash_message() {
	local message="$1"
	local message_sent=0

	for hook in $(echo $hooks | sed -e 's|,| |g') ; do
		basehook="$(echo $hook | cut -d: -f 1)"
		hookopts="$(echo $hook | cut -d: -f 2- -s)"

		if type -t hook_splash_message_${basehook} >/dev/null ; then
			message_sent=1
			hook_splash_message_${basehook} "$message" "${hookopts}"
		fi
	done

	if [ ${message_sent} -eq 0 ] ; then
		echo "${message}"
	fi
}

configdir="/etc/dt-init-scripts"
sharedir="/usr/share/dt-init-scripts"
libexecdir="/usr/libexec/dt-init-scripts"
bootdir="/boot"
hooks=
