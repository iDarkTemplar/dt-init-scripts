#!/bin/bash
#
# Copyright (C) 2017-2020 i.Dark_Templar <darktemplar@dark-templar-archives.net>
#
# This file is part of DT init scripts.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

configdir="/etc/dt-init-scripts"
sharedir="/usr/share/dt-init-scripts"
libexecdir="/usr/libexec/dt-init-scripts"
bootdir="/boot"

. "${libexecdir}/functions/common"

helper_copy_verbose=1

TMPDIR=$(mktemp -d)
TMPFILE=$(mktemp)
TMPFILE2=$(mktemp)

hooks=
compression=
microcode=
modules_version=
image_suffix=

while [[ $# -gt 0 ]] ; do
	case $1 in
		-c|--current-kernel)
			if [ "$modules_version" != "*" ] ; then
				modules_version="$(uname -r)"
				image_suffix="-$(uname -r)"
			fi

			shift
			;;
		-k|--kernel)
			if [ "$modules_version" != "*" ] ; then
				if [[ "$2" != */* ]] ; then
					if [[ "$(readlink -e "/lib/modules/$2")" == /lib/modules/* ]] ; then
						modules_version="$2"
						image_suffix="-$2"
					fi
				fi
			fi

			shift
			shift
			;;
		-a|--all-kernels)
			modules_version='*'
			image_suffix=
			shift
			;;
		*)
			echo "$0 - kernel initramfs generator" 1>&2
			echo "" 1>&2
			echo "Options:" 1>&2
			echo "	--help (-h)            - this help message" 1>&2
			echo "	--current-kernel (-c)  - add kernel modules for current kernel" 1>&2
			echo "	--kernel \$version (-k) - add kernel modules for specified kernel version" 1>&2
			echo "	--all-kernels (-a)     - add kernel modules for all kernels" 1>&2

			exit 1
			;;
	esac
done

while read -r line ; do
	if [ ! -z "$line" ] ; then
		case $line in
			initrd_hooks=\"*\")
				hooks="$(echo $line | sed -e 's|^initrd_hooks="||' -e 's|\"$||')"
				;;
			compression=\"*\")
				compression="$(echo $line | sed -e 's|^compression="||' -e 's|\"$||')"
				;;
			microcode=\"*\")
				microcode="$(echo $line | sed -e 's|^microcode="||' -e 's|\"$||')"
				;;
		esac
	fi
done < "${configdir}/dt-init-scripts.conf"

# first check options and ensure required functions are provided
for hook in $(echo $hooks | sed -e 's|,| |g') ; do
	basehook="$(echo $hook | cut -d: -f 1)"
	hookopts="$(echo $hook | cut -d: -f 2- -s)"

	[ -e "${libexecdir}/modules/${basehook}" ] || die "hook \"${basehook}\" doesn't exist"

	. "${libexecdir}/modules/${basehook}"

	type -t hook_install_${basehook} >/dev/null || die "hook \"${basehook}\" doesn't provide required function \"hook_install_${basehook}\""

	if type -t hook_check_params_${basehook} >/dev/null ; then
		hook_check_params_${basehook} "${hookopts}"
	fi
done

# then install hook
for hook in $(echo $hooks | sed -e 's|,| |g') ; do
	basehook="$(echo $hook | cut -d: -f 1)"
	hookopts="$(echo $hook | cut -d: -f 2- -s)"

	hook_install_${basehook} "${TMPDIR}" "${hookopts}"
done

if [ -n "$modules_version" ] ; then
	mkdir -p "${TMPDIR}"/lib/modules

	if [ "$modules_version" = "*" ] ; then
		echo copying all kernel modules
		cp -ar /lib/modules/* "${TMPDIR}"/lib/modules/
	else
		echo copying kernel modules for kernel "$modules_version"
		cp -ar "/lib/modules/$modules_version" "${TMPDIR}"/lib/modules/
	fi
fi

# and now write options
hookoptsline=

for hook in $(echo $hooks | sed -e 's|,| |g') ; do
	basehook="$(echo $hook | cut -d: -f 1)"
	hookopts="$(echo $hook | cut -d: -f 2- -s)"

	if type -t hook_write_params_${basehook} >/dev/null ; then
		hookopts="$(hook_write_params_${basehook} "${hookopts}")"
	fi

	hookoptslinepart="${basehook}"

	if [ -n "${hookopts}" ] ; then
		hookoptslinepart="${basehook}:${hookopts}"
	fi

	if [ -n "${hookoptsline}" ] ; then
		hookoptsline="${hookoptsline},${hookoptslinepart}"
	else
		hookoptsline="${hookoptslinepart}"
	fi
done

mkdir -p "${TMPDIR}/${configdir}"
echo initrd_hooks=\"${hookoptsline}\" > "${TMPDIR}/${configdir}/dt-init-scripts.conf"

pushd ${TMPDIR} &>/dev/null
find . -print | cpio -o -H newc | gzip -9 > ${TMPFILE}
popd &>/dev/null
chmod 644 ${TMPFILE}

has_hook_plymouth=0

for hook in $(echo $hooks | sed -e 's|,| |g') ; do
	basehook="$(echo $hook | cut -d: -f 1)"
	hookopts="$(echo $hook | cut -d: -f 2- -s)"

	if [ "${basehook}" = "plymouth" ] ; then
		has_hook_plymouth=1
	fi
done

if [ ${has_hook_plymouth} -eq 1 ] ; then
	BOOTFILE="initramfs-plymouth$image_suffix"
else
	BOOTFILE="initramfs-generic$image_suffix"
fi

gunzip < "${TMPFILE}" > "${TMPFILE2}"
rm "${TMPFILE}"

compress_file "${TMPFILE2}" "${bootdir}/${BOOTFILE}" "$compression"

add_microcode "${bootdir}/${BOOTFILE}" "${microcode}"

ln -svf ${BOOTFILE} "${bootdir}/initramfs"

rm -rf ${TMPDIR}
